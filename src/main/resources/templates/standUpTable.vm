$webResourceManager.requireResource("de.uhd.ifi.se.decision.management.confluence:decision-knowledge-import-resources")
<div id="wrapper">
    <div class="box">
            <table class="aui aui-table-list aui-table-sortable">
                <tbody>
                <tr>
                	<th>Type</th>
                    <th>Summary</th>
                    <th>Key</th>                    
                </tr>
                    #foreach($decisionKnowledgeElement in $knowledgeElements)
                        #set ($type = $decisionKnowledgeElement.getType())
                        #set ($imgPath="$type.png")
                <tr>
                    	<td><a target="_blank" href="$decisionKnowledgeElement.getLink()"><span class="type_images type_class_$decisionKnowledgeElement.getType()"></span> $decisionKnowledgeElement.getType()</a></td>                    	
                        <td>$decisionKnowledgeElement.getSummary()</td>
                        <td><a target="_blank" href="$decisionKnowledgeElement.getLink()">$decisionKnowledgeElement.getKey()</a></td>                        
                </tr>
                    #end
                </tbody>
            </table>
            <hr>
    </div>
</div>
<script type="application/javascript">
    setImages();

    function setImages() {
        $(".type_images").each(function (container) {
            var jElement = $($(".type_images")[container]);
            var sIssueType = getTypeFromClass(jElement);
            var img = mapTypeToIconsAndCreateImg(sIssueType);
            jElement.html(img);

        })
    }

    function getTypeFromClass(jElement) {
        // example type_class_Issue
        var sWholeClass = jElement[0].classList[1];
        var sType = sWholeClass.split("type_class_")[1].toLowerCase();
        return sType;
    }

    function mapTypeToIconsAndCreateImg(sType) {
        var res;
        var path = "$req.contextPath/download/resources/de.uhd.ifi.se.decision.management.confluence:decision-knowledge-import-resources/images/"
        var aImages = ["alternative", "argument", "argument_con", "argument_pro", "assessment", "assumption", "claim", "constraint", "context", "decision", "goal", "implication", "issue", "other", "problem", "solution"]
        if (sType == "pro") {
        	sType = "argument_pro";
        }
        if (sType == "con") {
        	sType = "argument_con";
        }
        if (aImages.indexOf(sType) > -1) {
            var img = new Image();

            img.src = path + sType + ".png";
            res = img;
        } else {
        	var oIcons={"aui-iconfont-task":["aufgabe","task"],
                "aui-iconfont-subtask":["unteraufgabe","subtask","sub-task"],
                "aui-iconfont-radio":["bug"],
                "aui-iconfont-comment":["story","user story"],
                "aui-iconfont-emoji":["epic"]
        	};
            // standard icon
            var sIcon = "aui-iconfont-jira";
            // check oIcons for sType
            Object.entries(oIcons).map(function (aElement){
                if (aElement[1].indexOf(sType) > -1){
                	// found translation
                    sIcon = aElement[0];
                }
            })
        	var span = '<span class="aui-icon aui-icon-small '+ sIcon + '">' + sType + '</span>';
        	res = span;
        }
        return res;
    }
</script>